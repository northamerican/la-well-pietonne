---
import { astroI18n, t, l } from "astro-i18n";
import Layout from "../../components/Layout.astro";
import Header from "../../components/Header.astro";
import Footer from "../../components/Footer.astro";
import sortBy from "lodash.sortby";
import { v4 as uuidv4 } from "uuid";
import { Idea } from "../../../types";
import getIpOrSubnet from "../../../public/js/getIpOrSubnet";
import IdeasCard from "../../components/IdeasCard.astro";

astroI18n.init(Astro);
const { langCode } = astroI18n;
const baseUrl = Astro.url.origin;
const clientIp = getIpOrSubnet(Astro.clientAddress);

let ideas: Idea[];
try {
  if (!Astro.cookies.has("session")) {
    Astro.cookies.set("session", uuidv4());
  }
} catch (error) {
  console.error(error);
}
try {
  const session = Astro.cookies.get("session").value;
  const ideasFetch = await fetch(
    `${baseUrl}/.netlify/functions/ideas?clientIp=${clientIp}`,
    { headers: { session } }
  );
  const ideasFetchRes = await ideasFetch.json();

  ideas = sortBy(ideasFetchRes, [
    (idea) => (idea.pending ? 0 : 1),
    (idea) => (idea.image ? 0 : 1),
    (idea) => -idea.votesCount,
  ]);
} catch (error) {
  console.error(error);
}
---

<Layout title={t("shareAnIdeaHeading")}>
  <Header />
  <main>
    <section class="full-width-mobile with-margin go-home">
      <a href={l("/")}>{t("goHome")}</a>
    </section>
    <section class="full-width-mobile with-margin" id="shareYourIdea">
      <h2 class="has-subheading">
        {t("shareAnIdeaHeading")}
      </h2>
      <p style="text-wrap: balance;">
        {t("shareAnIdeaEnded")}
      </p>
      <strong>
        <a href={l("consultation")}>
          {t("consultationLinkText")}
        </a>
      </strong>
    </section>
    <section class="full-width-mobile ideas-gallery">
      <h2>{t("ideasGallery")}</h2>
      <ul class="ideas-cards">
        {
          ideas?.map((idea) => {
            const {
              _id,
              image,
              name,
              description,
              votesCount,
              hasVoted,
              authorName,
              pending,
            } = idea;

            return (
              <IdeasCard
                _id={_id}
                image={image}
                name={name}
                langCode={langCode}
                description={description}
                authorName={authorName}
                votesCount={votesCount}
                hasVoted={hasVoted}
                pending={pending}
              />
            );
          })
        }
      </ul>
    </section>
    <section class="full-width-mobile">
      <p><a href="#shareYourIdea">{t("shareYourIdea")}</a></p>
    </section>
  </main>
  <Footer />
</Layout>

<script>
  import { cookieStore } from "cookie-store";
  const voteButtons = document.querySelectorAll("button.vote");
  const sessionCookie = await cookieStore.get("session");
  const session = sessionCookie.value;

  voteButtons.forEach((button) => {
    // Show vote buttons if cookies are enabled
    if (session) {
      button.classList.remove("hidden");
    }
    button.addEventListener("click", async (e) => {
      const target = e.target as HTMLButtonElement;
      const { id, votesCount } = target.dataset;

      fetch(`/.netlify/functions/ideas-vote?id=${id}`, {
        headers: { session },
      });

      const newVotesCount = +votesCount + 1;

      target.querySelector(".votes-count").innerHTML = newVotesCount.toString();
      target.dataset.votesCount = newVotesCount.toString();
      target.dataset.hasVoted = "1";
    });
  });
</script>

<style>
  .idea-form {
    display: flex;
    flex-direction: column;
    align-items: stretch;
    gap: 0.5rem;

    :is(input[type="submit"]) {
      align-self: flex-start;
    }

    @media (min-width: 780px) {
      margin: 0;
    }
  }

  .ideas-gallery h2 {
    margin-inline-start: 1rem;

    @media (min-width: 780px) {
      margin-inline-start: 0;
    }
  }

  .ideas-cards {
    display: grid;
    grid-template-columns: 1fr;
    grid-gap: 1rem;
    width: 100%;
    list-style: none;

    @media (min-width: 780px) {
      grid-template-columns: 1fr 1fr;
    }
    @media (min-width: 980px) {
      grid-template-columns: 1fr 1fr 1fr;
    }
  }
</style>
